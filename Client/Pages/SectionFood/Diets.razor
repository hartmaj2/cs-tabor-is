@page "/food/diets"
@layout SubLayoutFood
@inject HttpClient Http
@inject AllergenService AllergenService

<Modal @ref="editDietsModal" />

@* The if is needed because otherwise we try to render the DietFilterDropup before the allergens are known *@
@if (filterDietSelections != null)
{
    <div class="div-table-container">
        <div class="div-table-container-header"> <span> Diets </span> </div>
        <div class="div-table">
            <div class="div-table-header">
                <div class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(0)"> First name @headerArrows![0] </button> </div>
                <div class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(1)"> Last name @headerArrows[1] </button> </div>
                <div class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(2)"> Diets @headerArrows[2] </button> </div>
            </div>
            <div class="div-table-header">
                <div class="div-table-h-col"> <input class="name-search-box" @bind="firstNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div class="div-table-h-col"> <input class="name-search-box" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div class="div-table-h-col">
                    <Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropup" AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Size="DropdownSize.Small">
                        <DropdownToggleButton Class="filter-button"> Filter diets </DropdownToggleButton>
                        <DropdownMenu Class="px-3" Style="width:150px;">
                            @foreach (var dietSelection in filterDietSelections)
                            {
                                <label> <input type="checkbox" @bind="dietSelection.IsSelected" @bind:event="oninput"> @dietSelection.Name </label> <br/>
                            }
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <button style="width:auto" class="btn btn-primary" @onclick="ResetFilters"> Reset filters </button>
            </div>
            <div class="div-table-body">
                @if (participantDtos == null)
                {
                    <div class="div-table-row">
                        <span> Loading participants... </span>
                    </div>
                }
                else
                {
                    @foreach(var participant in sortedParticipants!)
                    {
                        <div class="div-table-row">
                            <div> @participant.FirstName </div>
                            <div> @participant.LastName </div>
                            <div>
                                @foreach(var diet in participant.Diets)
                                {
                                    <span> @diet.Name,  </span>
                                }
                            </div>
                            <button class="btn btn-primary" @onclick="() => ShowEditDietsModalAsync(participant)"> Edit diets </button>
                        </div>
                    }
                }
            </div>

        </div>

    </div>
}

@code
{

    // Initialize the concrete filters (I want to have them named)
    private TextFilter firstNameFilter = new() {FilterKeySelector = p => p.FirstName};
    private TextFilter lastNameFilter = new() {FilterKeySelector = p => p.LastName};

    private DietsFilter? dietsFilter;

    // Stores all the filters to be applied to participants
    private IList<IParticipantFilter> participantFilters = new List<IParticipantFilter>();

    // Add all filters to the filters list so I can apply them all sequentially
    private void InitializeFilters()
    {
        participantFilters.Add(firstNameFilter);
        participantFilters.Add(lastNameFilter);
        dietsFilter = new DietsFilter() {DietSelections = filterDietSelections!};
        participantFilters.Add(dietsFilter);
    }

    // Resets all filters so we can see all participants
    private void ResetFilters()
    {
        foreach (var filter in participantFilters)
        {
            filter.Reset();
        }
    }

    // Indicates index of the column by which we currently sort the participants
    private int activeSortingColumn = 0;

    // Stores the string that should be appended to every column if it is a sortable column
    // The active column has the arrow up/down symbol in the corresponding field
    private string[]? headerArrows;

    private IEnumerable<ParticipantDto>? participantDtos;

    // Provides a getter that first filters and then sorts the participants
    private IEnumerable<ParticipantDto>? sortedParticipants
    {
        get 
        {

            // filter all participants by folding the get filtered function over all filters with participantsDtos as starting point
            var filteredParticipants = 
                participantFilters.Aggregate(
                    participantDtos!,
                    (participantsSoFar,currentFilter) => currentFilter.GetFiltered(participantsSoFar)
                    );

            // then sort them
            return filteredParticipants.OrderBy(participantSorters[activeSortingColumn].KeySelector,participantSorters[activeSortingColumn].KeyComparer);
        }
    }

    // array of sorters which consist of a key selector and a switchable comparer
    // this array allows me to select current keyselector and comparer based on the active sorting column
    private ParticipantSorter<object>[] participantSorters = 
        {
            new ParticipantSorter<object>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.Diets, KeyComparer = new DietsSwitchableComparer() }
    };

    // The sort click is handled depending if the clicked column was already active or not
    // we flip the sort direction if the column was already active and was clicked
    // otherwise we sort in unreversed direction
    // lastly we have to update our active column
    private void HandleSortClick(int clickedColumn)
    {
        AdjustSorters(clickedColumn);
        AdjustHeaderArrows(clickedColumn);
        activeSortingColumn = clickedColumn;
    }

    private void AdjustSorters(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = !participantSorters[clickedColumn].KeyComparer.ReverseSort;
        }
        else
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = false;
        }
    }

    private void AdjustHeaderArrows(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            headerArrows![activeSortingColumn] = (headerArrows[activeSortingColumn] == "▲") ? "▼" : "▲";
        }
        else
        {
            headerArrows![activeSortingColumn] = "";
            headerArrows[clickedColumn] = "▲";
        }
    }

    // Initialize filters must be called after the filter diet selections are initialized (the diet filter uses the selections)
    // The filter diet selections can only be initialized after the allergens are loaded (diet selection are dependent on the list of all possible allergens)
    // So it is necessary to call 1. LoadAllergens(); 2. InitializeFilterDietSelectionsAsync(); 3. InitializeFilters();
    protected override async Task OnInitializedAsync()
    {
        headerArrows = new string[participantSorters.Length];
        await InitializeFilterDietSelectionsAsync();
        InitializeFilters();
        participantDtos = await Http.GetFromJsonAsync<List<ParticipantDto>>("/api/participants/all");
        foreach (var participant in participantDtos!) participant.Diets = participant.Diets.OrderBy(diet => diet.Name).ToList();
    }

    private Modal editDietsModal = default!;


    // shows the edit meals modal
    // have to pass who was the participant at which it was clicked, all possible allergens to display on the modal, and the function that we will trigger on click on modal button
    private async Task ShowEditDietsModalAsync(ParticipantDto selectedParticipant)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",selectedParticipant);
        parameters.Add("DietSelections",await GetParticipantDietSelectionsAsync(selectedParticipant));
        parameters.Add("OnSubmit",EventCallback.Factory.Create<ParticipantDto>(this,RequestParticipantEditAsync));
        await editDietsModal.ShowAsync<EditDietsModal>(title: $"Edit {selectedParticipant.FirstName}'s diets", parameters:parameters);
    }

    // Helper method to get diet selection list for the given participant
    private async Task<List<AllergenSelection>> GetParticipantDietSelectionsAsync(ParticipantDto participant)
    {
        var allAllergens = await AllergenService.GetAllergenDtosAsync();
        var dietSelections = allAllergens.Select(allergen => new AllergenSelection() {Name = allergen.Name, IsSelected = false}).ToList();
        foreach (var selection in dietSelections)
        {
            // Check if the name of this selection is contained in diet names of current participant
            if (participant.Diets.Select(diet => diet.Name).Contains(selection.Name)) selection.IsSelected = true;
        }
        return dietSelections;
    }

    // Send request to edit the participant to api, also have to hide the modal
    private async Task RequestParticipantEditAsync(ParticipantDto updatedParticipant)
    {
        await Http.PostAsJsonAsync<ParticipantDto>($"api/participants/edit/{updatedParticipant.Id}",updatedParticipant,CancellationToken.None);
        await editDietsModal.HideAsync();
    }

    private List<AllergenSelection>? filterDietSelections;

    private async Task InitializeFilterDietSelectionsAsync()
    {
        filterDietSelections = new();
        var allAllergens = await AllergenService.GetAllergenDtosAsync();
        foreach (var allergen in allAllergens)
        {
            filterDietSelections.Add(new AllergenSelection() {Name = allergen.Name} );
        }
    }

}