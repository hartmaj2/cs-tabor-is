@page "/food"
@inject HttpClient Http
@layout SubLayout
@inject IJSRuntime JSRuntime

<Modal @ref="addFoodModal" />

<DateSelector @bind-CurrentDate="currentDate" @bind-CurrentDate:after="LoadMeals"> </DateSelector>

@if (meals == null)
{
    <p> Loading... </p>
}
else
{
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Lunch" Meals="meals" OnAddFoodButtonClicked="ShowAddFoodModal"> </MealTimeContainer>
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Dinner" Meals="meals"> </MealTimeContainer>
}

@code
{
    private DateOnly currentDate;

    protected override async Task OnInitializedAsync()
    {
        currentDate = new DateOnly(2024,09,03);
        await LoadMeals();
    }

    private IQueryable<MealDto>? meals;
    private async Task LoadMeals()
    {
        meals = null;
        var dateString = currentDate.ToString("yyyy-MM-dd");
        Console.WriteLine(dateString);
        var mealsList = await Http.GetFromJsonAsync<List<MealDto>>($"api/meals/{dateString}");
        meals = mealsList!.AsQueryable();
    }

    private Modal addFoodModal = default!;

    private async Task ShowAddFoodModal()
    {
        await addFoodModal.ShowAsync<AddFoodModal>(title: "Allergens");
    }

}