@page "/food"
@inject HttpClient Http
@layout SubLayout
@inject IJSRuntime JSRuntime
@using System.Text.Json

<Modal @ref="editMealModal" />
<Modal @ref="deleteMealModal" />

<DateSelector @bind-CurrentDate="currentDate" @bind-CurrentDate:after="LoadMeals"> </DateSelector>

@if (meals == null)
{
    <p> Loading... </p>
}
else
{
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Lunch" Meals="meals" OnEditButtonClicked="ShowEditMealModal" OnDeleteButtonClicked="ShowDeleteMealModal" OnAddMealButtonClicked="() => ShowAddMealModal(MealTime.Lunch)"> </MealTimeContainer>
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Dinner" Meals="meals" OnEditButtonClicked="ShowEditMealModal" OnDeleteButtonClicked="ShowDeleteMealModal" OnAddMealButtonClicked="() => ShowAddMealModal(MealTime.Dinner)"> </MealTimeContainer>
}

@code
{
    private DateOnly currentDate;

    private MealTime currentModalMealTime;

    protected override async Task OnInitializedAsync()
    {
        currentDate = new DateOnly(2024,09,03);
        await LoadMeals();
        await LoadAllergens();
        await LoadMealTypes();
    }

    private IEnumerable<AllergenDto>? allAllergens;

    private IEnumerable<string>? mealTypes;

    private IQueryable<MealDto>? meals;

    // Loads the meals for current date
    private async Task LoadMeals()
    {
        meals = null;
        var dateString = currentDate.ToString("yyyy-MM-dd");
        Console.WriteLine(dateString);
        var mealsList = await Http.GetFromJsonAsync<List<MealDto>>($"api/meals/{dateString}");
        meals = mealsList!.AsQueryable();
    }

    // Gets list of all allergens
    private async Task LoadAllergens()
    {
        allAllergens = await Http.GetFromJsonAsync<List<AllergenDto>>("api/allergens/all");
    }

    // Gets list of all meal types {"Soup","Main"}
    private async Task LoadMealTypes()
    {
        mealTypes = await Http.GetFromJsonAsync<List<string>>("api/meals/meal-types");
    }

    private Modal editMealModal = default!;

    // All possible allergens to choose from get passed to the modal
    // All possible meal types also get passed
    // Lastly we pass the function that should be triggered when the meal is submitted
    // When modal is clicked, we also want to know, which MealTime (Lunch,Dinner) it is associated with
    private async Task ShowAddMealModal(MealTime mealTime)
    {
        currentModalMealTime = mealTime;
        var parameters = new Dictionary<string,object>();
        parameters.Add("SubmitButtonText","Add meal");
        parameters.Add("AllAllergens",allAllergens!);
        parameters.Add("MealTypes",mealTypes!);
        parameters.Add("OnMealSubmit",EventCallback.Factory.Create<MealFormData>(this,RequestMealCreation));
        await editMealModal.ShowAsync<EditMealModal>(title: "Add meal", parameters:parameters);
    }

    // Sends api post request for the MealsController to create new meal with given values
    private async Task RequestMealCreation(MealFormData submittedMeal)
    {
        var mealDto = submittedMeal.ConvertToMealDto(currentModalMealTime,currentDate);
        await editMealModal.HideAsync();
        await Http.PostAsJsonAsync<MealDto>("api/meals/add",mealDto);
        await LoadMeals();
    }

    private Modal deleteMealModal = default!;

    private void ShowDeleteMealModal(MealDto meal)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentMeal",meal);
        parameters.Add("OnDeleteMeal",EventCallback.Factory.Create<int>(this,RequestMealDelete));
        parameters.Add("OnRejectButton",EventCallback.Factory.Create(this,HideDeleteMealModal));
        deleteMealModal.ShowAsync<DeleteMealModal>(title:"Delete Meal",parameters: parameters);
    }

    private async Task HideDeleteMealModal()
    {
        await deleteMealModal.HideAsync();
    }

    // Sends api delete request for MealsController to delete meal with given id
    private async Task RequestMealDelete(int id)
    {
        await Http.DeleteAsync($"api/meals/{id}");
        await deleteMealModal.HideAsync();
        await LoadMeals();
    }

    private async Task ShowEditMealModal(MealDto meal)
    {
        currentModalMealTime = meal.MealTime;
        var parameters = new Dictionary<string,object>();
        parameters.Add("MealFormData",meal.ConvertToMealFormData(allAllergens!));
        parameters.Add("AllAllergens",allAllergens!);
        parameters.Add("MealTypes",mealTypes!);
        parameters.Add("OnMealSubmit",EventCallback.Factory.Create<MealFormData>(this,RequestMealEdit));
        await editMealModal.ShowAsync<EditMealModal>(title: "Edit meal", parameters:parameters);
    }

    private async Task RequestMealEdit(MealFormData meal)
    {
        var mealDto = meal.ConvertToMealDto(currentModalMealTime,currentDate);
        await Http.PostAsJsonAsync<MealDto>($"api/meals/edit/{meal.Id}",mealDto,CancellationToken.None);
        await editMealModal.HideAsync();
        await LoadMeals();
    }
}