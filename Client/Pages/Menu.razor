@page "/food"
@inject HttpClient Http
@layout SubLayout
@inject IJSRuntime JSRuntime
@using System.Text.Json

<Modal @ref="addFoodModal" />

<DateSelector @bind-CurrentDate="currentDate" @bind-CurrentDate:after="LoadMeals"> </DateSelector>

@if (meals == null)
{
    <p> Loading... </p>
}
else
{
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Lunch" Meals="meals" OnAddFoodButtonClicked="() => ShowAddFoodModal(MealTime.Lunch)"> </MealTimeContainer>
    <MealTimeContainer Date="currentDate" MealTime="MealTime.Dinner" Meals="meals" OnAddFoodButtonClicked="() => ShowAddFoodModal(MealTime.Dinner)"> </MealTimeContainer>
}

@code
{
    private DateOnly currentDate;

    private MealTime currentModalMealTime;

    protected override async Task OnInitializedAsync()
    {
        currentDate = new DateOnly(2024,09,03);
        await LoadMeals();
        await LoadAllergens();
        await LoadMealTypes();
    }

    private IEnumerable<Allergen>? allAllergens;

    private IEnumerable<string>? mealTypes;

    private IQueryable<MealDto>? meals;

    // Loads the meals for current date
    private async Task LoadMeals()
    {
        meals = null;
        var dateString = currentDate.ToString("yyyy-MM-dd");
        Console.WriteLine(dateString);
        var mealsList = await Http.GetFromJsonAsync<List<MealDto>>($"api/meals/{dateString}");
        meals = mealsList!.AsQueryable();
    }

    // Gets list of all allergens
    private async Task LoadAllergens()
    {
        allAllergens = await Http.GetFromJsonAsync<List<Allergen>>("api/allergens/all");
    }

    // Gets list of all meal types {"Soup","Main"}
    private async Task LoadMealTypes()
    {
        mealTypes = await Http.GetFromJsonAsync<List<string>>("api/meals/meal-types");
        foreach(var mealType in mealTypes!) Console.WriteLine(mealType);
    }

    private Modal addFoodModal = default!;

    // All possible allergens to choose from get passed to the modal
    // All possible meal types also get passed
    // Lastly we pass the function that should be triggered when the food is submitted
    // When modal is clicked, we also want to know, which MealTime (Lunch,Dinner) it is associated with
    private async Task ShowAddFoodModal(MealTime mealTime)
    {
        currentModalMealTime = mealTime;
        var parameters = new Dictionary<string,object>();
        parameters.Add("AllAllergens",allAllergens!);
        parameters.Add("MealTypes",mealTypes!);
        parameters.Add("OnFoodSubmit",EventCallback.Factory.Create<MealFormData>(this,RequestFoodCreation));
        await addFoodModal.ShowAsync<AddFoodModal>(title: "Add meal", parameters:parameters);
    }

    // Sends api post request for the MealsController to create new meal with given values
    private async Task RequestFoodCreation(MealFormData submittedMeal)
    {
        var mealDto = new MealDto() 
            {
                
                Name = submittedMeal.Name!,
                MealTime = currentModalMealTime,
                Type = Enum.Parse<MealType>(submittedMeal.MealType!),
                Date = currentDate,
                Allergens = submittedMeal.AllergenSelections!.Where(selection => selection.IsSelected).Select(selection => new AllergenDto {Name = selection.Name}).ToList()
            };
        await Http.PostAsJsonAsync<MealDto>("api/meals/add",mealDto);
        await addFoodModal.HideAsync();
        await LoadMeals();
    }
}