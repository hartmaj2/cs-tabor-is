@page "/participants/add"
@inject HttpClient Http

@* In contrast to edit participant, this page has also selection of diets that the participant has *@

@if (formSubmitted)
{
    <h1> Successfully added a participant! </h1>
    <button class="btn btn-primary" @onclick="() => {formSubmitted = false;}"> Add another participant  </button>
}
else
{
    <h1> Add a participant </h1>
    <div style="display:flex">
        <div>
            <h2> General information </h2>
            @* Use my custom component with 2-way-binding to its value *@
            <ParticipantForm @bind-ThisParticipant="participantData" OnValidSubmitEvent="SaveParticipant"> Add participant </ParticipantForm> 
        </div>

        @if (dietSelections != null)
        {
            <div style="margin-left:100px">
                <h2> Diets </h2>
                @foreach (var selection in dietSelections)
                {
                    <div>
                        <label> <input type="checkbox" @bind="selection.IsSelected"> @selection.Name </label>
                        
                    </div>
                }
            </div>
        }
        else
        {
            <p> Loading diets.. </p>
        }
    </div>
}

@code
{
    private IEnumerable<AllergenDto>? allAllergens;

    private IList<AllergenSelection>? dietSelections;

    // We initialize the participant to empty participant at the start
    private ParticipantFormData participantData = new();

    // Use this to render different content based on if the form was successfully submitted or not
    private bool formSubmitted = false;
    
    // Connects to my api and posts the participant that was submitted to the form
    private void SaveParticipant()
    {
        Http.PostAsJsonAsync<Participant>("/api/participants/add",participantData.ConvertToApiParticipant(),CancellationToken.None);
        formSubmitted = true;
        participantData = new();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllergens();
        LoadAllergenSelections();
    }

    // Gets list of all allergens
    private async Task LoadAllergens()
    {
        allAllergens = await Http.GetFromJsonAsync<List<AllergenDto>>("api/allergens/all");
    }

    private void LoadAllergenSelections()
    {
        dietSelections = allAllergens!.Select(allergen => new AllergenSelection() {Name = allergen.Name}).ToList();
    }

}