@page "/participants"
@page "/"
@layout SubLayoutParticipants
@inject HttpClient Http
@inject AllergenService AllergenService

<PageTitle> Participants </PageTitle>

<Modal @ref="editParticipantModal"/>
<Modal @ref="deleteParticipantModal"/>
<Modal @ref="addParticipantModal"/>

@if (participantDtos == null)
{
    <p> Loading... </p>
}
else
{

    <div class="div-table-container">
        <div class="div-table-container-header"> 
            <div> Participants </div> 
            <div class="button-right-container"> <button @onclick="ShowAddParticipantModal" class="btn btn-primary"> Add a participant </button> </div>
            
        </div>
        <div class="div-table">
            <div class="div-table-header">
                <div style="flex:@colWidths[0]" class="div-table-h-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(0)" > Id @sortingManager.HeaderArrows[0] </button> </div>
                <div style="flex:@colWidths[1]" class="div-table-h-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(1)" > First name @sortingManager.HeaderArrows[1] </button> </div>
                <div style="flex:@colWidths[2]" class="div-table-h-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(2)" > Last name @sortingManager.HeaderArrows[2] </button> </div>
                <div style="flex:@colWidths[3]" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(3)" > Age @sortingManager.HeaderArrows[3] </button> </div>
                <div style="flex:@colWidths[4]" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(4)" > Phone number @sortingManager.HeaderArrows[4] </button> </div>
                <div style="flex:@colWidths[5]" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => sortingManager.HandleSortClick(5)" > Birth number @sortingManager.HeaderArrows[5] </button> </div>
                <div style="flex:@colWidths[6]" class="button-right-container"> </div>
            </div>
            <div class="div-table-header">
                <div style="flex:@colWidths[0]" class="div-table-h-col">  <input class="id-search-box" @bind="idFilter.FilterText" @bind:event="oninput" placeholder="..." type="text"/> </div>
                <div style="flex:@colWidths[1]" class="div-table-h-col"> <input class="name-search-box" @bind="firstNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="flex:@colWidths[2]" class="div-table-h-col"> <input class="name-search-box" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="flex:@colWidths[3]" class="div-table-h-col">
                    <Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropup" AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Size="DropdownSize.Small">
                        <DropdownToggleButton Class="filter-button"> Filter </DropdownToggleButton>
                        <DropdownMenu Class="px-3" Style="width:150px;">
                            <div>
                                Min: 
                                <input type="range" @bind="ageBoundFilter.CurrentMin" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="text" @bind="ageBoundFilter.CurrentMin" @bind:event="oninput" />
                            </div>
                            <br>
                            <div>
                                Max: 
                                <input type="range" @bind="ageBoundFilter.CurrentMax" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="text" @bind="ageBoundFilter.CurrentMax" @bind:event="oninput" />
                            </div>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div style="flex:@colWidths[4]" class="div-table-h-col justify-center-col"> <input class="name-search-box" @bind="phoneNumberFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="flex:@colWidths[5]" class="div-table-h-col justify-center-col"> <input class="name-search-box" @bind="birthNumberFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="flex:@colWidths[6]" class="button-right-container"> <button style="width:auto" class="btn btn-primary" @onclick="ResetFilters"> Reset filters </button> </div>
                 
            </div>
            <div class="div-table-body">

                @foreach(var participant in sortedParticipants!)
                {
                    <div class="div-table-row">
                        <div style="flex:@colWidths[0]"> @participant.Id </div>
                        <div style="flex:@colWidths[1]"> @participant.FirstName </div>
                        <div style="flex:@colWidths[2]"> @participant.LastName </div>
                        <div style="flex:@colWidths[3]" class="justify-center-col"> @participant.Age </div>
                        <div style="flex:@colWidths[4]" class="justify-center-col"> @participant.PhoneNumber </div>
                        <div style="flex:@colWidths[5]" class="justify-center-col"> @participant.BirthNumber </div>
                        <div style="flex:@colWidths[6]" class="button-right-container"> 
                            <button class="btn btn-primary" @onclick="() => ShowEditParticipantModal(participant)" > Edit </button>
                            <button class="btn btn-primary" @onclick="() => ShowDeleteParticipantModal(participant)" > Delete </button>
                        </div>
                    </div>
                }
                
            </div>

        </div>

    </div>
}

@code
{

    private int[] colWidths = {70,150,150,100,160,150,200};
    private IEnumerable<ParticipantDto>? participantDtos;
 
    // Used to filter by age using lower and upper bound
    private IntegerBoundFilter ageBoundFilter = new(ParticipantFormData.LowestAge,ParticipantFormData.HighestAge) 
        {
            FilterKeySelector = p => (int) p.Age! 
        };

    private TextFilter idFilter = new() {FilterKeySelector = p => p.Id.ToString()};
    private TextFilter firstNameFilter = new() {FilterKeySelector = p => p.FirstName};
    private TextFilter lastNameFilter = new() {FilterKeySelector = p => p.LastName};
    private TextFilter phoneNumberFilter = new() {FilterKeySelector = p => p.PhoneNumber};
    private TextFilter birthNumberFilter = new() {FilterKeySelector = p => p.BirthNumber};


    // We need to add all filters to the list manually (because we need to bind to the filters in the QuickGrid using their name)
    private List<IParticipantFilter> participantFilters = new();

    // Is called OnInitializeAsync to initialize the list of filters
    private void InitializeFilters()
    {
        participantFilters.Add(idFilter);
        participantFilters.Add(ageBoundFilter); 
        participantFilters.Add(lastNameFilter);
        participantFilters.Add(firstNameFilter);
        participantFilters.Add(phoneNumberFilter);
        participantFilters.Add(birthNumberFilter);
    }

    // Reset all filters so we can see all participants
    private void ResetFilters()
    {
        foreach (var filter in participantFilters)
        {
            filter.Reset();
        }
    }

    private Modal addParticipantModal = default!;

    private async Task ShowAddParticipantModal()
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CreateParticipant",EventCallback.Factory.Create<ParticipantFormData>(this,RequestCreateParticipant));
        await addParticipantModal.ShowAsync<AddParticipantModal>(title:$"Add participant",parameters: parameters);
    }

    // Connects to my api and posts the participant that was submitted to the form
    private async Task RequestCreateParticipant(ParticipantFormData participant)
    {
        await Http.PostAsJsonAsync<ParticipantDto>("/api/participants/add",participant.ToParticipantDto(),CancellationToken.None);
        await LoadParticipants();
        await addParticipantModal.HideAsync();
    }


    // Add reference to the editParticipantsModal
    private Modal editParticipantModal = default!;

    // We need to convert the participantDto to the ParticipantFormData (it allows us to do form valiadtion)
    private async Task ShowEditParticipantModal(ParticipantDto participant)
    {
        var parameters = new Dictionary<string,object>();
        var allAllergens = await AllergenService.GetAllergenDtosAsync();
        parameters.Add("Participant",participant.ToParticipantFormData(allAllergens));
        parameters.Add("UpdateParticipant",EventCallback.Factory.Create<ParticipantFormData>(this,RequestParticipantEdit));
        await editParticipantModal.ShowAsync<EditParticipantModal>(title:$"Edit {participant.FirstName}",parameters: parameters);
    }

    // Send api request to update the participant
    // Need to convert from ParticipantFormData to ParticipantDto 
    private async Task RequestParticipantEdit(ParticipantFormData participant)
    {
        var participantDto = participant.ToParticipantDto();
        await Http.PostAsJsonAsync<ParticipantDto>($"/api/participants/edit/{participantDto.Id}",participantDto,CancellationToken.None);
        await LoadParticipants();
        await editParticipantModal.HideAsync();
    }

    // Add reference to my modal which I will use to confirm deletion of given participant
    private Modal deleteParticipantModal = default!;

    // Uses the reference to deletion modal to call the ShowAsync method with the component to be shown by the modal modal
    // The parameters are passed to the modal using dictionary with entries in format -> parameter_name : passed_value
    private void ShowDeleteParticipantModal(ParticipantDto participant)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",participant);
        parameters.Add("OnDeleteParticipant",EventCallback.Factory.Create<int>(this,RequestParticipantDelete));
        parameters.Add("OnRejectButton",EventCallback.Factory.Create(this,HideDeleteParticipantModal));
        deleteParticipantModal.ShowAsync<DeleteParticipantModal>(title:"Delete participant",parameters: parameters);
    }

    private async Task HideDeleteParticipantModal()
    {
        await deleteParticipantModal.HideAsync();
    }

    // Sends api request to delete participant with given id
    private async Task RequestParticipantDelete(int id)
    {
        await Http.DeleteAsync($"api/participants/delete/{id}");
        await LoadParticipants();
        await deleteParticipantModal.HideAsync();
    }

    // Add all filters to the list
    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        InitializeFilters();
        await LoadParticipants();
    }

    // Is used OnInitializedAsync and after deleting a participant
    private async Task LoadParticipants()
    {
        var participantsList = await Http.GetFromJsonAsync<List<ParticipantDto>>("api/participants/all");
        participantDtos = participantsList!.AsQueryable();
    }

    // Manages the header content of the columns
    // Also manages if a certain column should be shown or not in the quick grid
    private class TableColumnInfo
    {

        // Name of the property
        public required string PropName { get; set; }

        // Mark whether the property is checked in the show
        public bool IsChecked { get; set; } = true;
    }

    private TableColumnInfo[] columnInfos = 
    {
        new TableColumnInfo() {PropName = "Id"},
        new TableColumnInfo() {PropName = "First Name"},
        new TableColumnInfo() {PropName = "Last Name"},
        new TableColumnInfo() {PropName = "Age"},
        new TableColumnInfo() {PropName = "Phone Number"},
        new TableColumnInfo() {PropName = "Birth Number"},
    };

    // Provides a getter that first filters and then sorts the participants
    private IEnumerable<ParticipantDto>? sortedParticipants
    {
        get 
        {

            // filter all participants by folding the get filtered function over all filters with participantsDtos as starting point
            var filteredParticipants = 
                participantFilters.Aggregate(
                    participantDtos!,
                    (participantsSoFar,currentFilter) => currentFilter.GetFiltered(participantsSoFar)
                    );

            // then sort them
            return filteredParticipants.OrderBy(sortingManager.GetActiveSorterKeySelector(),sortingManager.GetActiveSorterKeyComparer());
        }
    }

    private ColumnSortingManager sortingManager = 
        new ColumnSortingManager
        (
            new ParticipantSorter<object>[]
            {
                new ParticipantSorter<object>() { KeySelector = participant => participant.Id, KeyComparer = new IntegerSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.Age, KeyComparer = new IntegerSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.PhoneNumber, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.BirthNumber, KeyComparer = new StringSwitchableComparer() }
            },
            0
        );

}