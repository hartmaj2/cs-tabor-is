@page "/participants/all"
@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle> Participants </PageTitle>

<h1> Participants </h1>



<NavLink class="nav-item" href="/participants/add">
    <button class="btn btn-primary"> Add a participant </button>
</NavLink>



@if (participants == null)
{
    <p> Loading participants... </p>
}
else
{
    <br/>
    <span> Show: </span> 
    @foreach (var tableColumnInfo in columnInfos)
    {
        <label class="checkbox-label"> <input type="checkbox" @bind="tableColumnInfo.IsChecked"/> @tableColumnInfo.PropName </label>
    }

    <QuickGrid Items="@FilteredParticipants" class="table quickgrid">
        
        @if (columnInfos[0].IsChecked)
        {
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title=@columnInfos[0].PropName/>
        }
        
        @if (columnInfos[1].IsChecked)
        {
            <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" Title=@columnInfos[1].PropName />
        }

        @if (columnInfos[2].IsChecked)
        {
            <PropertyColumn Property="@(p => p.LastName)" Sortable="true" Title=@columnInfos[2].PropName> 
                <ColumnOptions>
                    <input type="search" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="Search last name... "/>
                </ColumnOptions>
            </PropertyColumn>
        }

        @if (columnInfos[3].IsChecked)
        {
            <PropertyColumn Property="@(p => p.Age)" Sortable="true" Title=@columnInfos[3].PropName>
                <ColumnOptions>
                    <div>
                        Min: 
                        <input type="range" @bind="ageBoundFilter.Min" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                        <input type="text" @bind="ageBoundFilter.Min" @bind:event="oninput" />
                    </div>
                    <br>
                    <div>
                        Max: 
                        <input type="range" @bind="ageBoundFilter.Max" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                        <input type="text" @bind="ageBoundFilter.Max" @bind:event="oninput" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }

        @if (columnInfos[4].IsChecked)
        {
            <PropertyColumn Property="@(p => p.PhoneNumber)" Sortable="true" Title=@columnInfos[4].PropName/>
        }

        @if (columnInfos[5].IsChecked)
        {
            <PropertyColumn Property="@(p => p.BirthNumber)" Sortable="true" Title=@columnInfos[5].PropName/>
        }
        
        <TemplateColumn Title="Edit"> <button class="btn btn-primary" @onclick="() => NavigateToEditPage(context.Id)"> Edit </button></TemplateColumn>
        <TemplateColumn Title="Delete"> <button class="btn btn-primary" @onclick="() => ShowDeleteParticipantModal(context)"> Delete </button></TemplateColumn>
        
    </QuickGrid>

    <Modal @ref="deleteParticipantModal" /> 
}

@code
{
    private IQueryable<Participant>? participants;
 
    // Used to filter by age using lower and upper bound
    private QueryableIntegerBoundFilter ageBoundFilter = new() {Min = ParticipantFormData.LowestAge, Max = ParticipantFormData.HighestAge};

    private QueryableTextFilter lastNameFilter = new();

    // We need to add all filters to the list manually (because we need to bind to the filters in the QuickGrid using their name)
    private List<IQueryableParticipantFilter> filters = new();

    // Is called OnInitializeAsync to initialize the list of filters
    private void SetupFilters()
    {
        filters.Add(ageBoundFilter); 
        filters.Add(lastNameFilter);
    }

    // Add reference to my modal which I will use to confirm deletion of given participant
    private Modal deleteParticipantModal = default!;

    // Uses the reference to deletion modal to call the ShowAsync method with the component to be shown by the modal modal
    // The parameters are passed to the modal using dictionary with entries in format -> parameter_name : passed_value
    private void ShowDeleteParticipantModal(Participant participant)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",participant);
        parameters.Add("OnDeleteParticipant",EventCallback.Factory.Create<int>(this,RequestParticipantDelete));
        parameters.Add("OnRejectButton",EventCallback.Factory.Create(this,HideDeleteParticipantModal));
        deleteParticipantModal.ShowAsync<DeleteParticipantModal>(title:"Delete participant",parameters: parameters);
    }

    private async Task HideDeleteParticipantModal()
    {
        await deleteParticipantModal.HideAsync();
    }

    // Sends api request to delete participant with given id
    private async Task RequestParticipantDelete(int id)
    {
        await Http.DeleteAsync($"api/participants/delete/{id}");
        await LoadParticipants();
        await deleteParticipantModal.HideAsync();
    }

    // Filtered source for the QuickGrid
    private IQueryable<Participant> FilteredParticipants
    {
        get
        {
            var result = participants;
            foreach (var filter in filters){
                result = filter.GetFiltered(result!);
            }
            return result!;
        }
    } 

    // Add all filters to the list
    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        SetupFilters();
        await LoadParticipants();
    }

    // Is used OnInitializedAsync and after deleting a participant
    private async Task LoadParticipants()
    {
        var participantsList = await Http.GetFromJsonAsync<List<Participant>>("api/participants/all");
        participants = participantsList!.AsQueryable();
    }

    // Used to navigate to edit page after pressing the edit button
    // The id argument is received from the TemplateColumn context which is a reference to the participant in the current row
    private void NavigateToEditPage(int id)
    {
        Navigation.NavigateTo($"/participants/edit/{id}");
    }

    // Manages the header content of the columns
    // Also manages if a certain column should be shown or not in the quick grid
    private class TableColumnInfo
    {

        // Name of the property
        public required string PropName { get; set; }

        // Mark whether the property is checked in the show
        public bool IsChecked { get; set; } = true;
    }

    private TableColumnInfo[] columnInfos = 
    {
        new TableColumnInfo() {PropName = "Id"},
        new TableColumnInfo() {PropName = "First Name"},
        new TableColumnInfo() {PropName = "Last Name"},
        new TableColumnInfo() {PropName = "Age"},
        new TableColumnInfo() {PropName = "Phone Number"},
        new TableColumnInfo() {PropName = "Birth Number"},
    };

}