@page "/participants/all"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle> Participants </PageTitle>

<h1> Participants </h1>

<NavLink class="nav-item" href="/participants/add">
    <button class="btn btn-primary"> Add a participant </button>
</NavLink>

@if (participants == null)
{
    <p> Loading participants... </p>
}
else
{
    <QuickGrid Items="@FilteredParticipants" class="table quickgrid">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" > 
            <ColumnOptions>
                <input type="search" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="Search last name... "/>
            </ColumnOptions>
        </PropertyColumn>
        
        <PropertyColumn Property="@(p => p.Age)" Sortable="true" >
            <ColumnOptions>
                <div>
                    Min: 
                    <input type="range" @bind="ageBoundFilter.Min" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                    <input type="text" @bind="ageBoundFilter.Min" @bind:event="oninput" />
                </div>
                <br>
                <div>
                    Max: 
                    <input type="range" @bind="ageBoundFilter.Max" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                    <input type="text" @bind="ageBoundFilter.Max" @bind:event="oninput" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.PhoneNumber)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BirthNumber)" Sortable="true" />
        <TemplateColumn Title="Edit"> <button class="btn btn-primary" @onclick="() => NavigateToEditPage(context.Id)"> Edit </button></TemplateColumn>
        
    </QuickGrid>
}

@code
{
    private IQueryable<Participant>? participants;

    // Used to filter by age using lower and upper bound
    private AgeBoundFilter ageBoundFilter = new AgeBoundFilter();

    private LastNameFilter lastNameFilter = new LastNameFilter();

    // Filtered source for the QuickGrid
    private IQueryable<Participant> FilteredParticipants
    {
        get
        {
            var result = ageBoundFilter.GetFiltered(participants!);
            return lastNameFilter.GetFiltered(result);
        }
    } 

    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        var participantsList = await Http.GetFromJsonAsync<List<Participant>>("api/participants/all");
        participants = participantsList!.AsQueryable();
    }

    // Used to navigate to edit page after pressing the edit button
    // The id argument is received from the TemplateColumn context which is a reference to the participant in the current row
    // 
    private void NavigateToEditPage(int id)
    {
        Navigation.NavigateTo($"/participants/edit/{id}");
    }

    private class LastNameFilter
    {
        public string? FilterText { get ; set; }

        public IQueryable<Participant> GetFiltered(IQueryable<Participant> unfiltered)
        {
            if (string.IsNullOrWhiteSpace(FilterText)) return unfiltered;
            return unfiltered.Where(p => p.LastName!.Contains(FilterText,StringComparison.CurrentCultureIgnoreCase));
        }
    }

    private class AgeBoundFilter
    {
        public int Min { get; set; } = ParticipantFormData.LowestAge;
        public int Max { get; set; } = ParticipantFormData.HighestAge;

        public IQueryable<Participant> GetFiltered(IQueryable<Participant> unfiltered)
        {
            return unfiltered.Where(p => p.Age >= Min && p.Age <= Max);
        }
    }
    
}