@page "/participants/all"
@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json

<PageTitle> Participants </PageTitle>

<h1> Participants </h1>



<NavLink class="nav-item" href="/participants/add">
    <button class="btn btn-primary"> Add a participant </button>
</NavLink>



@if (participantDtos == null)
{
    <p> Loading participants... </p>
}
else
{

    <div class="div-table-container">
        <div class="div-table-container-header"> <span> Participants </span> </div>
        <div class="div-table">
            <div class="div-table-header">
                <div style="width:@colWidths[0]px" class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(0)" > Id @headerArrows[0] </button> </div>
                <div style="width:@colWidths[1]px" class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(1)" > First name @headerArrows[1] </button> </div>
                <div style="width:@colWidths[2]px" class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(2)" > Last name @headerArrows[2] </button> </div>
                <div style="width:@colWidths[3]px" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => HandleSortClick(3)" > Age @headerArrows[3] </button> </div>
                <div style="width:@colWidths[4]px" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => HandleSortClick(4)" > Phone number @headerArrows[4] </button> </div>
                <div style="width:@colWidths[5]px" class="div-table-h-col justify-center-col"> <button class="clickable-header" @onclick="() => HandleSortClick(5)" > Birth number @headerArrows[5] </button> </div>
            </div>
            <div class="div-table-header">
                <div style="width:@colWidths[0]px" class="div-table-h-col"></div>
                <div style="width:@colWidths[1]px" class="div-table-h-col"> <input style="width:@(colWidths[2]-20)px" class="name-search-box" @bind="firstNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="width:@colWidths[2]px" class="div-table-h-col"> <input style="width:@(colWidths[2]-20)px" class="name-search-box" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="search..." type="text"/> </div>
                <div style="width:@colWidths[3]px" class="div-table-h-col">
                    <Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropup" AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Size="DropdownSize.Small">
                        <DropdownToggleButton> Filter </DropdownToggleButton>
                        <DropdownMenu Class="px-3" Style="width:150px;">
                            <div>
                                Min: 
                                <input type="range" @bind="ageBoundFilter.Min" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="text" @bind="ageBoundFilter.Min" @bind:event="oninput" />
                            </div>
                            <br>
                            <div>
                                Max: 
                                <input type="range" @bind="ageBoundFilter.Max" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="text" @bind="ageBoundFilter.Max" @bind:event="oninput" />
                            </div>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div style="width:@colWidths[4]px" class="div-table-h-col"></div>
                <div style="width:@colWidths[5]px" class="div-table-h-col"></div>
                
            </div>
            <div class="div-table-body">
                @if (participantDtos == null)
                {
                    <div class="div-table-row">
                        <span> Loading participants... </span>
                    </div>
                }
                else
                {
                    @foreach(var participant in sortedParticipants!)
                    {
                        <div class="div-table-row">
                            <div style="width:@colWidths[0]px" > @participant.Id </div>
                            <div style="width:@colWidths[1]px"> @participant.FirstName </div>
                            <div style="width:@colWidths[2]px"> @participant.LastName </div>
                            <div class="justify-center-col" style="width:@colWidths[3]px"> @participant.Age </div>
                            <div class="justify-center-col" style="width:@colWidths[4]px"> @participant.PhoneNumber </div>
                            <div class="justify-center-col" style="width:@colWidths[5]px"> @participant.BirthNumber </div>
                            <button class="btn btn-primary" @onclick="() => NavigateToEditPage(participant.Id)" > Edit </button>
                            <button class="btn btn-primary" @onclick="() => ShowDeleteParticipantModal(participant)" > Delete </button>
                        </div>
                    }
                }
            </div>

        </div>

    </div>

    <Modal @ref="deleteParticipantModal" /> 
}

@code
{

    private int[] colWidths = {70,150,150,100,160,150};
    private IEnumerable<ParticipantDto>? participantDtos;
 
    // Used to filter by age using lower and upper bound
    private IntegerBoundFilter ageBoundFilter = new() 
        {
            Min = ParticipantFormData.LowestAge, 
            Max = ParticipantFormData.HighestAge,
            FilterKeySelector = p => (int) p.Age 
        };

    private TextFilter firstNameFilter = new() {FilterKeySelector = p => p.FirstName};
    private TextFilter lastNameFilter = new() {FilterKeySelector = p => p.LastName};

    // We need to add all filters to the list manually (because we need to bind to the filters in the QuickGrid using their name)
    private List<IParticipantFilter> participantFilters = new();

    // Is called OnInitializeAsync to initialize the list of filters
    private void InitializeFilters()
    {
        participantFilters.Add(ageBoundFilter); 
        participantFilters.Add(lastNameFilter);
        participantFilters.Add(firstNameFilter);
    }

    // Add reference to my modal which I will use to confirm deletion of given participant
    private Modal deleteParticipantModal = default!;

    // Uses the reference to deletion modal to call the ShowAsync method with the component to be shown by the modal modal
    // The parameters are passed to the modal using dictionary with entries in format -> parameter_name : passed_value
    private void ShowDeleteParticipantModal(ParticipantDto participant)
    {
        Console.WriteLine(JsonSerializer.Serialize(participant));
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",participant);
        parameters.Add("OnDeleteParticipant",EventCallback.Factory.Create<int>(this,RequestParticipantDelete));
        parameters.Add("OnRejectButton",EventCallback.Factory.Create(this,HideDeleteParticipantModal));
        deleteParticipantModal.ShowAsync<DeleteParticipantModal>(title:"Delete participant",parameters: parameters);
    }

    private async Task HideDeleteParticipantModal()
    {
        await deleteParticipantModal.HideAsync();
    }

    // Sends api request to delete participant with given id
    private async Task RequestParticipantDelete(int id)
    {
        await Http.DeleteAsync($"api/participants/delete/{id}");
        await LoadParticipants();
        await deleteParticipantModal.HideAsync();
    }

    // Add all filters to the list
    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        InitializeFilters();
        await LoadParticipants();
        headerArrows = new string[participantSorters.Length];
    }

    // Is used OnInitializedAsync and after deleting a participant
    private async Task LoadParticipants()
    {
        var participantsList = await Http.GetFromJsonAsync<List<ParticipantDto>>("api/participants/all");
        participantDtos = participantsList!.AsQueryable();
    }

    // Used to navigate to edit page after pressing the edit button
    // The id argument is received from the TemplateColumn context which is a reference to the participant in the current row
    private void NavigateToEditPage(int id)
    {
        Navigation.NavigateTo($"/participants/edit/{id}");
    }

    // Manages the header content of the columns
    // Also manages if a certain column should be shown or not in the quick grid
    private class TableColumnInfo
    {

        // Name of the property
        public required string PropName { get; set; }

        // Mark whether the property is checked in the show
        public bool IsChecked { get; set; } = true;
    }

    private TableColumnInfo[] columnInfos = 
    {
        new TableColumnInfo() {PropName = "Id"},
        new TableColumnInfo() {PropName = "First Name"},
        new TableColumnInfo() {PropName = "Last Name"},
        new TableColumnInfo() {PropName = "Age"},
        new TableColumnInfo() {PropName = "Phone Number"},
        new TableColumnInfo() {PropName = "Birth Number"},
    };

        // Indicates index of the column by which we currently sort the participants
    private int activeSortingColumn = 0;

    // Stores the string that should be appended to every column if it is a sortable column
    // The active column has the arrow up/down symbol in the corresponding field
    private string[]? headerArrows;

    // Provides a getter that first filters and then sorts the participants
    private IEnumerable<ParticipantDto>? sortedParticipants
    {
        get 
        {

            // filter all participants by folding the get filtered function over all filters with participantsDtos as starting point
            var filteredParticipants = 
                participantFilters.Aggregate(
                    participantDtos!,
                    (participantsSoFar,currentFilter) => currentFilter.GetFiltered(participantsSoFar)
                    );

            // then sort them
            return filteredParticipants.OrderBy(participantSorters[activeSortingColumn].KeySelector,participantSorters[activeSortingColumn].KeyComparer);
        }
    }

        // array of sorters which consist of a key selector and a switchable comparer
    // this array allows me to select current keyselector and comparer based on the active sorting column
    private ParticipantSorter<object>[] participantSorters = 
        {
            new ParticipantSorter<object>() { KeySelector = participant => participant.Id, KeyComparer = new IntegerSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.Age, KeyComparer = new IntegerSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.PhoneNumber, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<object>() { KeySelector = participant => participant.BirthNumber, KeyComparer = new StringSwitchableComparer() },
        };

    // The sort click is handled depending if the clicked column was already active or not
    // we flip the sort direction if the column was already active and was clicked
    // otherwise we sort in unreversed direction
    // lastly we have to update our active column
    private void HandleSortClick(int clickedColumn)
    {
        AdjustSorters(clickedColumn);
        AdjustHeaderArrows(clickedColumn);
        activeSortingColumn = clickedColumn;
    }

    private void AdjustSorters(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = !participantSorters[clickedColumn].KeyComparer.ReverseSort;
        }
        else
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = false;
        }
    }

    private void AdjustHeaderArrows(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            headerArrows![activeSortingColumn] = (headerArrows[activeSortingColumn] == "▲") ? "▼" : "▲";
        }
        else
        {
            headerArrows![activeSortingColumn] = "";
            headerArrows[clickedColumn] = "▲";
        }
    }

}