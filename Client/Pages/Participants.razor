@page "/participants/all"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle> Participants </PageTitle>

<h1> Participants </h1>

<NavLink class="nav-item" href="/participants/add">
    <button class="btn btn-primary"> Add a participant </button>
</NavLink>

@if (participants == null)
{
    <p> Loading participants... </p>
}
else
{
    <QuickGrid Items="@FilteredParticipants" class="table quickgrid">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" > 
            <ColumnOptions>
                <input type="search" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="Search last name... "/>
            </ColumnOptions>
        </PropertyColumn>
        
        <PropertyColumn Property="@(p => p.Age)" Sortable="true" >
            <ColumnOptions>
                <div>
                    Min: 
                    <input type="range" @bind="ageBoundFilter.Min" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                    <input type="text" @bind="ageBoundFilter.Min" @bind:event="oninput" />
                </div>
                <br>
                <div>
                    Max: 
                    <input type="range" @bind="ageBoundFilter.Max" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                    <input type="text" @bind="ageBoundFilter.Max" @bind:event="oninput" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.PhoneNumber)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BirthNumber)" Sortable="true" />
        <TemplateColumn Title="Edit"> <button class="btn btn-primary" @onclick="() => NavigateToEditPage(context.Id)"> Edit </button></TemplateColumn>
        <TemplateColumn Title="Delete"> <button class="btn btn-primary" @onclick="@(() => ShowDeleteParticipantModal(context.Id,context.FirstName + " " + context.LastName))"> Delete </button></TemplateColumn>
        
    </QuickGrid>

    <ConfirmParticipantModal @ref="deleteParticipantModal" OnConfirm="DeleteParticipant"> Are you sure you want to delete participant </ConfirmParticipantModal>
}

@code
{
    private IQueryable<Participant>? participants;

    // Used to filter by age using lower and upper bound
    private IntegerBoundFilter ageBoundFilter = new() {Min = ParticipantFormData.LowestAge, Max = ParticipantFormData.HighestAge};

    private TextFilter lastNameFilter = new();

    // We need to add all filters to the list manually (because we need to bind to the filters in the QuickGrid using their name)
    private List<IQuickGridFilter> filters = new();

    // Is called OnInitializeAsync to initialize the list of filters
    private void SetupFilters()
    {
        filters.Add(ageBoundFilter); 
        filters.Add(lastNameFilter);
    }

    // Add reference to my modal which I will use to confirm deletion of given participant
    private ConfirmParticipantModal? deleteParticipantModal;

    // Uses the reference to deletion modal to call the ShowModal method of that modal that causes it to show up and also store the participant data
    private void ShowDeleteParticipantModal(int participantId, string participantName)
    {
        deleteParticipantModal!.ShowModal(participantId,participantName);
    }

    // Filtered source for the QuickGrid
    private IQueryable<Participant> FilteredParticipants
    {
        get
        {
            var result = participants;
            foreach (var filter in filters){
                result = filter.GetFiltered(result!);
            }
            return result!;
        }
    } 

    // Add all filters to the list
    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        SetupFilters();
        await LoadParticipants();
    }

    // Is used OnInitializedAsync and after deleting a participant
    private async Task LoadParticipants()
    {
        var participantsList = await Http.GetFromJsonAsync<List<Participant>>("api/participants/all");
        participants = participantsList!.AsQueryable();
    }

    // Used to navigate to edit page after pressing the edit button
    // The id argument is received from the TemplateColumn context which is a reference to the participant in the current row
    // 
    private void NavigateToEditPage(int id)
    {
        Navigation.NavigateTo($"/participants/edit/{id}");
    }

    private async Task DeleteParticipant(int id)
    {
        await Http.DeleteAsync($"api/participants/delete/{id}");
        await LoadParticipants();
    }
    
}