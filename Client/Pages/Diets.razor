@page "/food/diets"
@layout SubLayout
@inject HttpClient Http

<div class="div-table-container">
    <div class="div-table-container-header"> <span> Diets </span> </div>
    <div class="div-table">
        <div class="div-table-header">
            <button class="clickable-header" @onclick="() => HandleSortClick(0)"> First name @headerArrows[0] </button>
            <button class="clickable-header" @onclick="() => HandleSortClick(1)"> Last name @headerArrows[1] </button>
            <div> Diets </div>
        </div>
        <div class="div-table-body">
            @if (participantDtos == null)
            {
                <div class="div-table-row">
                    <span> Loading participants... </span>
                </div>
            }
            else
            {
                @foreach(var participant in sortedParticipants!)
                {
                    <div class="div-table-row">
                        <div> @participant.FirstName </div>
                        <div> @participant.LastName </div>
                        <div>
                            @foreach(var diet in participant.Diets)
                            {
                                <span> @diet.Name,  </span>
                            }
                        </div>
                        <button class="btn btn-primary"> Edit diets </button>
                    </div>
                }
            }
        </div>

    </div>

</div>


@code
{

    private int activeSortingColumn = 0;

    private string[] headerArrows = {"",""};

    private List<ParticipantDto>? participantDtos;
    private IEnumerable<ParticipantDto>? sortedParticipants;
    
    // array of sorters which consist of a key selector and a switchable comparer
    // this array allows me to select current keyselector and comparer based on the active sorting column
    private ParticipantSorter<string>[] participantSorters = 
        {
            new ParticipantSorter<string>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<string>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
        };

    // The sort click is handled depending if the clicked column was already active or not
    // we flip the sort direction if the column was already active and was clicked
    // otherwise we sort in unreversed direction
    // lastly we have to update our active column
    private async Task HandleSortClick(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = !participantSorters[clickedColumn].KeyComparer.ReverseSort;
            headerArrows[activeSortingColumn] = (headerArrows[activeSortingColumn] == "▲") ? "▼" : "▲";
        }
        else
        {
            headerArrows[activeSortingColumn] = "";
            headerArrows[clickedColumn] = "▲";
            participantSorters[clickedColumn].KeyComparer.ReverseSort = false;
        }
        activeSortingColumn = clickedColumn;
        sortedParticipants = participantDtos!.OrderBy(participantSorters[activeSortingColumn].KeySelector,participantSorters[activeSortingColumn].KeyComparer);
    }

    protected override async Task OnInitializedAsync()
    {
        participantDtos = await Http.GetFromJsonAsync<List<ParticipantDto>>("/api/participants/all");
        sortedParticipants = participantDtos;
    }


}