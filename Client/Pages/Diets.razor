@page "/food/diets"
@layout SubLayout
@inject HttpClient Http

<Modal @ref="editDietsModal" />

<div class="div-table-container">
    <div class="div-table-container-header"> <span> Diets </span> </div>
    <div class="div-table">
        <div class="div-table-header">
            <div class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(0)"> First name @headerArrows[0] </button> </div>
            <div class="div-table-h-col"> <button class="clickable-header" @onclick="() => HandleSortClick(1)"> Last name @headerArrows[1] </button> </div>
            <div> Diets </div>
        </div>
        <div class="div-table-header">
            <div class="div-table-h-col"> <input class="name-search-box" placeholder="search..." type="text"/> </div>
            <div class="div-table-h-col"> <input class="name-search-box" placeholder="search..." type="text"/> </div>
        </div>
        <div class="div-table-body">
            @if (participantDtos == null)
            {
                <div class="div-table-row">
                    <span> Loading participants... </span>
                </div>
            }
            else
            {
                @foreach(var participant in sortedParticipants!)
                {
                    <div class="div-table-row">
                        <div> @participant.FirstName </div>
                        <div> @participant.LastName </div>
                        <div>
                            @foreach(var diet in participant.Diets)
                            {
                                <span> @diet.Name,  </span>
                            }
                        </div>
                        <button class="btn btn-primary" @onclick="() => ShowEditDietsModal(participant)"> Edit diets </button>
                    </div>
                }
            }
        </div>

    </div>

</div>


@code
{

    // Indicates index of the column by which we currently sort the participants
    private int activeSortingColumn = 0;

    // Stores the string that should be appended to every column if it is a sortable column
    // The active column has the arrow up/down symbol in the corresponding field
    private string[] headerArrows = {"",""};

    private List<ParticipantDto>? participantDtos;
    private IEnumerable<ParticipantDto>? sortedParticipants;
    
    // array of sorters which consist of a key selector and a switchable comparer
    // this array allows me to select current keyselector and comparer based on the active sorting column
    private ParticipantSorter<string>[] participantSorters = 
        {
            new ParticipantSorter<string>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
            new ParticipantSorter<string>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
        };

    // The sort click is handled depending if the clicked column was already active or not
    // we flip the sort direction if the column was already active and was clicked
    // otherwise we sort in unreversed direction
    // lastly we have to update our active column
    private void HandleSortClick(int clickedColumn)
    {
        AdjustSorters(clickedColumn);
        AdjustHeaderArrows(clickedColumn);
        activeSortingColumn = clickedColumn;
        sortedParticipants = participantDtos!.OrderBy(participantSorters[activeSortingColumn].KeySelector,participantSorters[activeSortingColumn].KeyComparer);
    }

    private void AdjustSorters(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = !participantSorters[clickedColumn].KeyComparer.ReverseSort;
        }
        else
        {
            participantSorters[clickedColumn].KeyComparer.ReverseSort = false;
        }
    }

    private void AdjustHeaderArrows(int clickedColumn)
    {
        if (clickedColumn == activeSortingColumn)
        {
            headerArrows[activeSortingColumn] = (headerArrows[activeSortingColumn] == "▲") ? "▼" : "▲";
        }
        else
        {
            headerArrows[activeSortingColumn] = "";
            headerArrows[clickedColumn] = "▲";
        }
    }

    private List<AllergenDto>? allAllergens;

    // Gets list of all allergens
    private async Task LoadAllergens()
    {
        allAllergens = await Http.GetFromJsonAsync<List<AllergenDto>>("api/allergens/all");
    }

    protected override async Task OnInitializedAsync()
    {
        participantDtos = await Http.GetFromJsonAsync<List<ParticipantDto>>("/api/participants/all");
        await LoadAllergens();
        sortedParticipants = participantDtos;
    }

    private Modal editDietsModal = default!;


    // shows the edit meals modal
    // have to pass who was the participant at which it was clicked, all possible allergens to display on the modal, and the function that we will trigger on click on modal button
    private async Task ShowEditDietsModal(ParticipantDto selectedParticipant)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",selectedParticipant);
        parameters.Add("DietSelections",GetParticipantDietSelections(selectedParticipant));
        parameters.Add("OnSubmit",EventCallback.Factory.Create<ParticipantDto>(this,RequestParticipantEdit));
        await editDietsModal.ShowAsync<EditDietsModal>(title: $"Edit {selectedParticipant.FirstName}'s diets", parameters:parameters);
    }

    // Helper method to get diet selection list for the given participant
    private List<AllergenSelection> GetParticipantDietSelections(ParticipantDto participant)
    {
        var dietSelections = allAllergens!.Select(allergen => new AllergenSelection() {Name = allergen.Name, IsSelected = false}).ToList();
        foreach (var selection in dietSelections)
        {
            // Check if the name of this selection is contained in diet names of current participant
            if (participant.Diets.Select(diet => diet.Name).Contains(selection.Name)) selection.IsSelected = true;
        }
        return dietSelections;
    }

    // Send request to edit the participant to api, also have to hide the modal
    private async Task RequestParticipantEdit(ParticipantDto updatedParticipant)
    {
        await Http.PostAsJsonAsync<ParticipantDto>($"api/participants/edit/{updatedParticipant.Id}",updatedParticipant,CancellationToken.None);
        await editDietsModal.HideAsync();
    }

}