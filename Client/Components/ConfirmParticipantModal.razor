@* This component represents a simple modal for confirming actions on participants *@

@if (isModalVisible)
{
    <div>
        <div>
            <p> @ChildContent @participantName &#63; </p>
            <button class="btn btn-primary" @onclick="Confirm">Yes</button>
            <button class="btn btn-primary" @onclick="Cancel">No</button>
        </div>
    </div>
}

@code {

    // Serves to set the text of the modal before the participant name and questionmark
    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    // Represents a callback for function I will be calling when the confirm button is pressed
    [Parameter]
    public EventCallback<int> OnConfirm { get; set; }   

    private bool isModalVisible = false;
    private int participantId;
    private string? participantName;

    public void ShowModal(int participantId, string participantName)
    {
        this.participantId = participantId;
        this.participantName = participantName;
        isModalVisible = true;
    }

    // On confirmation, we want to fire invoke the function we received from the parent component, we invoke it with the current participantId
    private void Confirm()
    {
        OnConfirm.InvokeAsync(participantId);
        isModalVisible = false;
    }

    // Just set the modal as invisible
    private void Cancel()
    {
        isModalVisible = false;
    }
}