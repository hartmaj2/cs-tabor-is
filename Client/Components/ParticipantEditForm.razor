@using Shared
@inject HttpClient Http

@if (formSubmitted)
{
    <h1> Successfully added a participant! </h1>
    <button class="btn btn-primary" @onclick="() => {formSubmitted = false;}"> Add another participant  </button>
}
else
{
    <h1> Add a participant </h1>
    <EditForm Model="@participantFormData" OnValidSubmit="SaveParticipant" >
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div>
            <label for="firstname"> FirstName: </label> <br/>
            <InputText id="firstname" @bind-Value="participantFormData.FirstName"/>
            <ValidationMessage For="() => participantFormData.FirstName" />
        </div>

        <div>
            <label for="lastname"> LastName: </label> <br/>
            <InputText id="lastname" @bind-Value="participantFormData.LastName"/>
            <ValidationMessage For="() => participantFormData.LastName" />
        </div>

        <div>
            <label for="age"> Age: </label> <br/>
            <InputNumber id="age" @bind-Value="participantFormData.Age"/>
            <ValidationMessage For="() => participantFormData.Age" />
        </div>

        <div>
            <label for="phonenumber"> PhoneNumber: </label> <br/>
            <InputText id="phonenumber" @bind-Value="participantFormData.PhoneNumber"/>
            <ValidationMessage For="() => participantFormData.PhoneNumber" />
        </div>

        <div>
            <label for="birthnumber"> BirthNumber: </label> <br/>
            <InputText id="birthnumber" @bind-Value="participantFormData.BirthNumber"/>
            <ValidationMessage For="() => participantFormData.BirthNumber" />
        </div>

        <br><br>
        <button type="submit" class="btn btn-primary"> Add participant </button>

    </EditForm>
}

@code
{
    private bool formSubmitted = false;
    
    [Parameter]
    public ParticipantFormData InitialParticipantData {get; set;} = new();

    [Parameter]
    public Delegate OnSubmitAction {get; set; } = PostNewParticipant;

    private ParticipantFormData? participantFormData;
    
    protected override void OnInitialized()
    {
        participantFormData = InitialParticipantData;
    }

    private void SaveParticipant()
    {
        OnSubmitAction.DynamicInvoke(Http,participantFormData);
        formSubmitted = true;
        participantFormData = new();
    }
    
    public static void PostNewParticipant(HttpClient http, ParticipantFormData participantData)
    {
        http.PostAsJsonAsync<Participant>("/api/participants",participantData.ConvertToApiParticipant(),CancellationToken.None);
    }
}