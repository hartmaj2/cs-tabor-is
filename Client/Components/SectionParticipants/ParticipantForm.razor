@namespace Client.Components

@* TODO: Find why submit button not working on first click  *@

<EditForm Model="@ThisParticipant" OnValidSubmit="OnValidSubmitEvent" OnInvalidSubmit="OnInvalidSubmitEvent">
    <DataAnnotationsValidator/>

    <div>
        <label @ref="firstLabel" for="firstname"> First Name: </label> <br/>
        <InputText id="firstname" @bind-Value="ThisParticipant.FirstName"/>
        <ValidationMessage For="() => ThisParticipant.FirstName" />
    </div>

    <div>
        <label for="lastname"> Last Name: </label> <br/>
        <InputText id="lastname" @bind-Value="ThisParticipant.LastName"/>
        <ValidationMessage For="() => ThisParticipant.LastName" />
    </div>

    <div>
        <label for="phonenumber"> Phone Number: </label> <br/>
        <InputText id="phonenumber" @bind-Value="ThisParticipant.PhoneNumber"/>
        <ValidationMessage For="() => ThisParticipant.PhoneNumber" />
    </div>

    <div>
        <label for="birthnumber"> Birth Number: </label> <br/>
        <InputText id="birthnumber" @bind-Value="ThisParticipant.BirthNumber"/>
        <ValidationMessage For="() => ThisParticipant.BirthNumber" />
    </div>

    <div>
        <label for="birthnumber"> Age: </label> <br/>
        <InputNumber id="birthnumber" @bind-Value="ThisParticipant.Age"/>
        <ValidationMessage For="() => ThisParticipant.Age" />
    </div>

    <button type="submit" class="btn btn-primary"> @ChildContent </button>

</EditForm>

@* The following code uses two way binding  *@
@code
{

    // Used to hookup to my custom OnValidSubmitEvent of this component
    [Parameter]
    public EventCallback OnValidSubmitEvent { get; set; }

    [Parameter]
    public EventCallback OnInvalidSubmitEvent { get; set; }
    
    // Used in two way binding as the value I am bound to
    [Parameter]
    public ParticipantFormData ThisParticipant { get; set; } = ParticipantFormData.CreateDefault();

    // When ThisParticipant property is modified, this event is fired (Blazor knows it must be this event because of the naming)
    [Parameter]
    public EventCallback<ParticipantFormData> ThisParticipantChanged { get; set; }

    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    private ElementReference firstLabel;
    
    // Sets focus on the first element of the form so user can start entering data right away
    // Need to use OnAfterRender because to set focus on an element I need to be sure, that the element was already rendered
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            firstLabel.FocusAsync();
        }
    }

}