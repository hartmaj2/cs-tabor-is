@namespace Client.Components
@inject AllergenService AllergenService

@* A modal to add participants, consists of: *@
@*  1. the form to enter general information that can be seen in the participants table *@ 
@*  2. checkboxes to set diets *@

<div class="modal-div">

    <div class="modal-section-headers"> 
        <div class="modal-section-header"> <div> General information </div> </div>
        <div class="modal-section-header"> <div> Diets </div> </div>
    </div>

    <div class="modal-sections">
        <div class="modal-section">
            @* Use my custom component with 2-way-binding to its value *@
            <ParticipantForm @bind-ThisParticipant="Participant" OnValidSubmitEvent="OnFormSubmitAsync"> Confirm </ParticipantForm> 
        </div>

        @if (Participant.DietSelections != null)
        {
            <div class="modal-section">
                <div class="modal-allergen-selections">       
                    @foreach (var selection in Participant.DietSelections)
                    {
                        <div class="modal-allergen-selection">
                            <div style="flex:2"></div>
                            <label style="flex: 3"> <input type="checkbox" @bind="selection.IsSelected"> @selection.Name </label>
                            <div style="flex:1"></div>
                        </div>
                        
                    }
                </div>
            </div>
        }
        else
        {
            <p> Loading diets.. </p>
        }
    </div>
</div>
@code
{
    
    // The participant data that will be edited by setting the general information
    public ParticipantFormData Participant { get; set; } = ParticipantFormData.CreateDefault();
    
    // Event triggered, when the ocnfirm button of the edit participant form is pressed
    [Parameter]
    public EventCallback<ParticipantFormData> CreateParticipant { get; set; }

    // when we submit the form we trigger the function connected to CreateParticipant callback with the participant form data
    // then reset the modal so next time it is opened, we don't have data from the previous participant there
    private async Task OnFormSubmitAsync()
    {
        await CreateParticipant.InvokeAsync(Participant);
        await ResetParticipantFormDataAsync();
    }

    // on start, we need to load the diet selections for all possible allergens
    protected override async Task OnInitializedAsync()
    {
        await InitializeParticipantDietSelectionsAsync();
    }

    // create participant with all values empty and initialize their diet selections
    private async Task ResetParticipantFormDataAsync()
    {
        Participant = ParticipantFormData.CreateDefault();
        await InitializeParticipantDietSelectionsAsync();
    }

    // load diet selections of this participant using AllergenService service injected to this component
    private async Task InitializeParticipantDietSelectionsAsync()
    {
        var allAllergens = await AllergenService.GetAllergenDtosAsync();
        Participant.DietSelections = allAllergens.Select(allergen => new AllergenSelection() {Name = allergen.Name }).ToList();
    }
}
