@using Shared

<EditForm Model="@MealFormData" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="meal-name" > Meal name: </label> <br/>
        <InputText id="meal-name" @bind-Value="MealFormData.Name"/> <br/>
        <ValidationMessage For="() => MealFormData.Name" />
        <br/> 
    </div>

    <div>
        <label> Meal type: </label> <br/>
        <InputRadioGroup @bind-Value="MealFormData.MealType">
            @foreach (var mealType in MealTypes!)
            {
                <InputRadio id="@mealType" Value="@mealType" /> <label for="@mealType"> @mealType </label> <br/>
            }
        </InputRadioGroup>
        <ValidationMessage For="() => MealFormData.MealType" />
        <br/>
    </div>

    <div>
        <label> Allergens: </label> <br/>
        @foreach (var allergenSelection in MealFormData.AllergenSelections!)
        {
            <InputCheckbox id="@allergenSelection.Name" type="checkbox" @bind-Value="allergenSelection.IsSelected" /> <label for="@allergenSelection.Name"> @allergenSelection.Name </label> <br/>
        }
        <br/>
    </div>

    <button type="submit" class="btn btn-primary"> @SubmitButtonText </button>

</EditForm>

@code
{
    [Parameter]
    public string SubmitButtonText { get; set; } = "Edit meal";

    [Parameter]
    public MealFormData MealFormData { get; set; } = new();

    [Parameter]
    public IEnumerable<AllergenDto>? AllAllergens { get; set; }

    [Parameter]
    public IEnumerable<string>? MealTypes { get; set; }

    // When meal is submitted we trigger a function that will get the resulting meal passed to it
    [Parameter]
    public EventCallback<MealFormData> OnMealSubmit { get; set; }
    
    // Invoke the function to request creation of new meal from our api
    private void OnFormSubmit()
    {
        OnMealSubmit.InvokeAsync(MealFormData);
        ResetMealFormData();
    }

    // Initialize the AllergenSelections of our mealFormData, we need to set the names of each AllergenSelection object to the correct allergen name
    protected override void OnInitialized()
    {   
        // I only need to create List of allergen selecitons if there is none already (when editing I have it prefilled)
        if (MealFormData.AllergenSelections == null)
        {
            LoadAllergensToMealFormData();
        }
    }
    
    private void ResetMealFormData()
    {
        MealFormData = new();
        LoadAllergensToMealFormData();
    }

    private void LoadAllergensToMealFormData()
    {
        MealFormData.AllergenSelections = AllAllergens!.Select(allergen => new MealFormData.AllergenSelection() {Name = allergen.Name}).ToList();
    }
}